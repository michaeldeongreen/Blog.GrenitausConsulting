pool:
    vmImage: 'vs2017-win2016'

variables:
    buildConfiguration: 'Release'

steps:
# Build gc-cli dotnet core console application
- script: dotnet build --configuration $(buildConfiguration)
  workingDirectory: '$(System.DefaultWorkingDirectory)\cli\gc-cli'
  displayName: 'Step 1 - Build gc-cli'
  continueOnError: false

# Build web api dotnet webapi application
- script: dotnet build --configuration $(buildConfiguration)
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebApi\Blog.GrenitausConsulting.Core.Web.Api'
  displayName: 'Step 2 - Build Web API'
  continueOnError: false

# Run Unit Tests for web api application
- script: dotnet test --configuration $(buildConfiguration)
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebApi\Blog.GrenitausConsulting.Core.Unit.Tests'
  displayName: 'Step 3 - Run Web API Tests'
  continueOnError: false

# Run Unit Tests for gc-cli console application
- script: dotnet test --configuration $(buildConfiguration)
  workingDirectory: '$(System.DefaultWorkingDirectory)\cli\Blog.GrenitausConsulting.CLI.Core.Unit.Tests'
  displayName: 'Step 4 - Run gc-cli Tests'
  continueOnError: false

# Publish gc-cli as a windows 10 64-bit executable (hard dependency on Windows vm)
- script: dotnet publish --configuration $(buildConfiguration) -r win10-x64
  workingDirectory: '$(System.DefaultWorkingDirectory)\cli\gc-cli'
  displayName: 'Step 5 - Publish gc-cli'
  continueOnError: false

# Command Line Script does the following:
# Set the directory where the .json config files are located, which are in the web api app data folder
# Set the directory where the gc-cli output files will be located, which will be in the web client src directory
# Execute gc-cli.exe and generate static html files, rss & sitemaps xml files
- script: |
    SET @configdir=$(System.DefaultWorkingDirectory)\$(cli.argument.configdir)
    SET @outputdir=$(System.DefaultWorkingDirectory)\$(cli.argument.outputdir)

    gc-cli.exe -blogurl $(cli.argument.blogurl) -configdir %@configdir% -outputdir %@outputdir%
  workingDirectory: '$(System.DefaultWorkingDirectory)\cli\gc-cli\bin\Release\netcoreapp2.0\win10-x64\publish'
  displayName: 'Step 6 - Run gc-cli'
  continueOnError: false

# Publish web api dotnet webapi application (Note: dist will be inside the main webapi project folder)
- script: dotnet publish -c $(buildConfiguration) -o dist
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebApi\Blog.GrenitausConsulting.Core.Web.Api'
  displayName: 'Step 7 - Publish Web API'
  continueOnError: false

# Find the newly created dist folder with web api artifacts and zip them to artifacts staging for release pipeline
- task: ArchiveFiles@2
  displayName: 'Step 8 - Zip WebApi Artifacts'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)\WebApi\Blog.GrenitausConsulting.Core.Web.Api\dist'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\webapi.zip'  

# Install @angular/cli, with a specific version
- script: npm install -g @angular/cli@7.2.2
  displayName: 'Step 9 - npm install @angular/cli 7.2.2'
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebClient'

# Install all npm package dependencies for the angular web client
- script: npm install
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebClient'
  displayName: 'Step 10 - npm install packages dependencies'

# Build the angular web client
- script: ng build --prod
  workingDirectory: '$(System.DefaultWorkingDirectory)\WebClient'
  displayName: 'Step 11 - Build WebClient'

# Find the newly created dist folder with web client artifacts zip them to artifacts staging for release pipeline
- task: ArchiveFiles@2
  displayName: 'Step 12 - Zip WebClient Artifacts'
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)\WebClient\dist'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)\webclient.zip'

# Copy the deploy.ps1 Powershell script into the artifacts directory for the release pipleline
- task: CopyFiles@2
  displayName: 'Step 13 - Copy Powershell scripts to Artifacts Directory'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
     **/*.ps1
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

# Publish build artifacts
# Should have:
# webapi.zip
# webclient.zip
# deploy.ps1
- task: PublishBuildArtifacts@1
  displayName: 'Step 14 - Publish Build Artifacts'